// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å –∫ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ.
// "NORTH", "SOUTH", "WEST", "EAST". –ï—Å–ª–∏ "NORTH" –∏ "SOUTH" –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã,
// –∞ –∑–Ω–∞—á–∏—Ç –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ —ç—Ç–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ. "WEST" –∏ "EAST" —Ç–æ–∂–µ.
// –ù–∞–ø—Ä–∏–º–µ—Ä, crossDesert(["NORTH", "SOUTH", "EAST", "WEST"])
// "NORTH" + "SOUTH" ü°™ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ–≤–µ—Ä, –∞ –ø–æ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —é–≥, –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Å—Ç–µ.
//     –û—Å—Ç–∞–µ—Ç—Å—è ["EAST", "WEST"] ü°™ –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º —Ç–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è, —Ç–æ –æ—Å—Ç–∞–Ω–µ–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ.
//     –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º—ã –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.
// crossDesert(["NORTH", "WEST", "SOUTH", "EAST"]) ü°™ ["NORTH", "WEST", "SOUTH", "EAST"]
// crossDesert([ 'NORTH', 'SOUTH', 'SOUTH', 'EAST', 'WEST', 'NORTH', 'NORTH' ]) ü°™ [ 'NORTH' ]
// crossDesert([ 'NORTH', 'EAST', 'NORTH', 'EAST', 'WEST', 'WEST', 'EAST', 'EAST', 'WEST', 'SOUTH' ]) ü°™
// ['NORTH', 'EAST']
// crossDesert([ 'NORTH', 'WEST', 'SOUTH', 'EAST' ]) ü°™  ['NORTH', 'WEST', 'SOUTH', 'EAST']
// crossDesert([ 'NORTH', 'SOUTH', 'SOUTH', 'EAST', 'WEST', 'NORTH', 'WEST' ]) ü°™ [ 'WEST' ]

function crossDesert(arrayOfDirections) {
    let working = [...arrayOfDirections];
    let i = 0
    while (i < working.length - 1) {
        if (checkOpposite(working[i], working[i + 1])) {
            working.splice(i, 2);
        } else {
            i++;
        }
    }
    return arrayOfDirections.length === working.length ? working : crossDesert(working);
}

function checkOpposite(one, two) {
    return (one === 'NORTH' && two === 'SOUTH')
        || (two === 'NORTH' && one === 'SOUTH')
        || (one === 'WEST' && two === 'EAST')
        || (two === 'WEST' && one === 'EAST');
}

console.log(crossDesert(["NORTH", "SOUTH", "EAST", "WEST"]));//[]
console.log(crossDesert(["NORTH", "WEST", "SOUTH", "EAST"]));//ü°™ ["NORTH", "WEST", "SOUTH", "EAST"]
console.log(crossDesert(['NORTH', 'SOUTH', 'SOUTH', 'EAST', 'WEST', 'NORTH', 'NORTH']));//ü°™ [ 'NORTH' ]
console.log(crossDesert(['NORTH', 'EAST', 'NORTH', 'EAST', 'WEST', 'WEST', 'EAST', 'EAST', 'WEST', 'SOUTH']));// ['NORTH', 'EAST']
console.log(crossDesert(['NORTH', 'WEST', 'SOUTH', 'EAST']));//ü°™  ['NORTH', 'WEST', 'SOUTH', 'EAST']
console.log(crossDesert(['NORTH', 'SOUTH', 'SOUTH', 'EAST', 'WEST', 'NORTH', 'WEST']));// ü°™ [ 'WEST' ]